---
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: "lazy" | "eager";
}

const { 
  src, 
  alt, 
  width, 
  height,
  class: className = "",
  loading = "lazy"
} = Astro.props;

// Générer les chemins d'images optimisées
const imgSrc = src.replace('.webp', '-lg.webp');
const imgSrcSmall = src.replace('.webp', '-sm.webp');
---

<div class:list={["progressive-image relative overflow-hidden", className]}>
  <img
    src={imgSrcSmall}
    data-src={imgSrc}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding="async"
    class="w-full h-full object-cover transition-opacity duration-300 blur-sm scale-105"
  />
  <img
    src={imgSrc}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding="async"
    class="absolute inset-0 w-full h-full object-cover opacity-0 transition-opacity duration-300"
    onload="this.classList.add('opacity-100'); this.previousElementSibling.classList.add('opacity-0')"
  />
</div>

<style>
  .progressive-image {
    background-color: #f3f4f6;
  }
</style>

<script>
  // Intersection Observer pour le chargement progressif
  const images = document.querySelectorAll<HTMLImageElement>('.progressive-image img[data-src]');
  
  const imageObserver = new IntersectionObserver((entries, observer) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target as HTMLImageElement;
        const dataSrc = img.getAttribute('data-src');
        if (dataSrc) {
          img.src = dataSrc;
        }
        observer.unobserve(img);
      }
    });
  }, {
    rootMargin: '50px 0px',
    threshold: 0.1
  });

  images.forEach(img => imageObserver.observe(img));
</script>
